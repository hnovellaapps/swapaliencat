{"version":3,"sources":["state/actions.ts","state/hooks.ts","config/constants/types.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/contracts.ts","utils/multicall.ts","contexts/BlockContext.tsx","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts"],"names":["ZERO","BigNumber","useFetchPublicData","dispatch","useDispatch","slowRefresh","useRefresh","useEffect","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsDataAsync","useFarms","useSelector","state","farms","data","useFarmFromPid","pid","find","f","useFarmUser","farm","allowance","userData","tokenBalance","stakedBalance","earnings","usePools","account","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","tokenPriceVsQuote","usePriceMashBusd","useTotalValue","totalFarmsValue","useFarmsValue","totalLaunchPoolValue","useLaunchPoolValue","sum","bnbPrice","mashPrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","QuoteToken","BNB","times","CAKE","plus","launchPools","forEach","launchPool","stakingTokenAddress","stakingTokenName","MASH","totalStaked","div","pow","tokenDecimals","PoolCategory","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","a","prev","clearInterval","Provider","useContext","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","cake","56","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","wcake","btcb","vault","plum","slime","tako","multicall","abi","calls","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","decodeFunctionResult","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","getCakeAddress","addresses","chainId","getMasterChefAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","sousId","tokenName","contractAddress","poolCategory","CORE","projectLink","harvest","isFinished","tokenPerBlock","sortOrder","startBlock","endBlock","withBurnFee","isLPStake","isLPReward","burnFee","slimeRounding","image","isApe","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","poolConfig","CHAIN_ID","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","index","toJSON","fetchPoolsTotalStatking","nonBnbPools","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","erc20ABI","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","fetchRewardAddress","console","log","initialState","PoolsSlice","createSlice","reducers","setPoolsPublicData","action","livePoolsData","payload","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","LaunchPoolsSlice","setInitialState","actions","fetchLaunchPools","blockLimits","totalStakings","liveData","blockLimit","totalStaking","stakingTokenBalances","rewardAddress","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","BUSD","quoteTokenAdresses","contracts","VAULT","PLUM","depositUrl","isTokenOnly","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","toNumber","links","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","document","location","Home","lazy","Farms","Pools","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","quoteTokenDecimals","tokenAmount","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","mashPerBlock","allocPoint","poolWeight","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","masterChefAdress","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","farmsSlice","setFarmsPublicData","liveFarmsData","liveFarmData","setFarmUserData","arrayOfUserDataObjects","userDataEl","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance"],"mappings":"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","file":"static/js/main.ff5dedb8.chunk.js","sourcesContent":["export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { fetchLaunchPoolsUserDataAsync, fetchPoolsDataAsync } from './pools'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n    dispatch(fetchPoolsDataAsync()) \r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useLaunchPools = (): Pool[] => {\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceMashBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // MASH-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  let value = new BigNumber(0)\r\n  const totalFarmsValue = useFarmsValue()\r\n  const totalLaunchPoolValue = useLaunchPoolValue()\r\n  value = BigNumber.sum(totalFarmsValue, totalLaunchPoolValue)\r\n  return value\r\n}\r\n\r\nexport const useFarmsValue = () => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const mashPrice = usePriceMashBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken))\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) { // TODO: should be updated with quiteToken.MASH\r\n        val = (mashPrice.times(farm.lpTotalInQuoteToken))\r\n      } else {\r\n        val = (farm.lpTotalInQuoteToken)\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport const useLaunchPoolValue = () => {\r\n  const launchPools = useLaunchPools();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const mashPrice = usePriceMashBusd();\r\n  let value = new BigNumber(0);\r\n  launchPools.forEach(launchPool => {\r\n    if (launchPool.stakingTokenAddress) {\r\n      let val;\r\n      if (launchPool.stakingTokenName === QuoteToken.MASH) {\r\n        val = mashPrice.times(launchPool.totalStaked).div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      } else if (launchPool.stakingTokenName === QuoteToken.BNB) {\r\n        val = bnbPrice.times(launchPool.totalStaked).div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      } else {\r\n        val = launchPool.totalStaked.div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  })\r\n  return value;\r\n}\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'WCAKE' = 'WCAKE',\r\n  'VAULT' = 'VAULT',\r\n  'BTCB' = 'BTCB',\r\n  'MASH' = 'MASH',\r\n  'PLUM' = 'PLUM',\r\n  'SLIME' = 'SLIME',\r\n  'TAKO' = 'TAKO'\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n  depositUrl?: string\r\n  image?: string\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string,\r\n  withBurnFee?: boolean,\r\n  burnFee?: number,\r\n  isLPReward ?: boolean,  isLPStake ?: boolean,\r\n  withwithdrawDepositFee?:boolean,\r\n  depositFee?:number,\r\n  noApy?:boolean,\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n  startBlock? :number\r\n  endBlock? : number\r\n  isApe?: boolean\r\n  slimeRounding? : number,\r\n  isSlimeAMM? : boolean\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","export default {\r\n  cake: {\r\n    56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0x8932a6265b01d1d4e1650feb8ac38f9d79d3957b',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  wcake: {\r\n    56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    97: '',\r\n  },\r\n  btcb: {\r\n    56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n    97: '',\r\n  },\r\n  vault: {\r\n    56: '0xd456be0ff7007b3d8ad656136487a23e771f5762',\r\n    97: '',\r\n  },\r\n  plum: {\r\n    56: '0xdE8eD8c9480EA12D050182AA99630B235dE30f83',\r\n    97: '',\r\n  },\r\n  slime: {\r\n    56: '0x23b06097F8FE2DD9D3dF094D3ee8319Daa8756c1',\r\n    97: '',\r\n  },\r\n  tako: {\r\n    56: '0x2F3391AeBE27393aBa0a790aa5E1577fEA0361c2',\r\n    97: ''\r\n  }\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst MASH = 'MASH';\r\n\r\nconst pools: PoolConfig[] = [\r\n  {\r\n    sousId: 8,\r\n    tokenName: 'Mash-SlimeV2 LP',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0xab76B5DA1af1C8091B8B8C87533627BB94D2FE36',\r\n      56: '0xab76B5DA1af1C8091B8B8C87533627BB94D2FE36',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://app.slime.finance/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.000856329483621793',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7323438,\r\n    endBlock: 7525038,\r\n    withBurnFee:true,\r\n    isLPStake:false,\r\n    isLPReward:true,\r\n    burnFee:0,\r\n    slimeRounding:5,\r\n    image: 'mash-slime'\r\n  },\r\n  {\r\n    sousId: 2,\r\n    tokenName: 'MASH-BUSD LP',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0x00ea75D83B3Cb954447BADc9F807631416933C48',\r\n      56: '0x00ea75D83B3Cb954447BADc9F807631416933C48',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://marshmallowdefi.com/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.002777777777777777',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7386238,\r\n    endBlock: 7587838,\r\n    withBurnFee: true,\r\n    isLPStake:false,\r\n    isLPReward:true,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-busd'\r\n  },\r\n  {\r\n    sousId: 1,\r\n    tokenName: 'MASH-BNB LP',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0xB949337009c97298c06Acbb585058887d10Ba3f9',\r\n      56: '0xB949337009c97298c06Acbb585058887d10Ba3f9',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://marshmallowdefi.com/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.000124007936507936',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7386238,\r\n    endBlock: 7587838,\r\n    withBurnFee: true,\r\n    isLPStake:false,\r\n    isLPReward:true,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-bnb'\r\n  },\r\n  {\r\n    sousId: 3,\r\n    tokenName: 'MASH-PLUM LP V2',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0x99eC02568f4090A066c027d3172d317db0DD90a4',\r\n      56: '0x99eC02568f4090A066c027d3172d317db0DD90a4',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://plumcake.finance/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.002901785714285714',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7488488,\r\n    endBlock: 7690088,\r\n    withBurnFee: true,\r\n    isLPStake:false,\r\n    isLPReward:true,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-plum'\r\n  },\r\n  {\r\n    sousId: 4,\r\n    tokenName: 'MASH-TAKO APE LP',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0x56d93Aefaf766b8DA4a57b9805057BD2822fC73a',\r\n      56: '0x56d93Aefaf766b8DA4a57b9805057BD2822fC73a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://apeswap.finance/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.008933531746031746',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7516658,\r\n    endBlock: 7718258,\r\n    withBurnFee: true,\r\n    isLPStake:false,\r\n    isLPReward:true,\r\n    isApe: true,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-tako'\r\n  },\r\n  {\r\n    sousId: 9,\r\n    tokenName: 'Mash-SlimeV2 LP',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0x99B75635683E874d8ea3e2696a25e25AeDFDC454',\r\n      56: '0x99B75635683E874d8ea3e2696a25e25AeDFDC454',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://app.slime.finance/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.002251984126984126',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7544928,\r\n    endBlock: 7746528,\r\n    withBurnFee: true,\r\n    isLPStake: false,\r\n    isLPReward: true,\r\n    burnFee: 0,\r\n    slimeRounding: 5,\r\n    image: 'mash-slime'\r\n  },\r\n  {\r\n    sousId: 10,\r\n    tokenName: 'BTCB',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0x08fa76bAA1D731F54248d45Ab19F9E8642f49b2D',\r\n      56: '0x08fa76bAA1D731F54248d45Ab19F9E8642f49b2D',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://marshmallowdefi.com/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.000000258928571428',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7605838,\r\n    endBlock: 7807438,\r\n    withBurnFee: true,\r\n    isLPStake: false,\r\n    isLPReward: false,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-btcb'\r\n  },\r\n  {\r\n    sousId: 11,\r\n    tokenName: 'CAKE',\r\n    stakingTokenName: QuoteToken[MASH],\r\n    stakingTokenAddress: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    contractAddress: {\r\n      97: '0xdeB31d3cb07f9F25D162B4cF4dBC79BC2983d39a',\r\n      56: '0xdeB31d3cb07f9F25D162B4cF4dBC79BC2983d39a',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    projectLink: 'https://pancakeswap.finance/',\r\n    harvest: true,\r\n    isFinished: false,\r\n    tokenPerBlock: '0.000570436507936507',\r\n    sortOrder: 1,\r\n    tokenDecimals: 18,\r\n    startBlock: 7605838,\r\n    endBlock: 7807438,\r\n    withBurnFee: true,\r\n    isLPStake: false,\r\n    isLPReward: false,\r\n    burnFee: 3,\r\n    slimeRounding: 5,\r\n    image: 'mash-wcake'\r\n  },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n\r\nexport const fetchRewardAddress = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'rewardToken',\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n\r\n  console.log(\"fetchRewardAddress\",res);\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]:res[index],\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n\r\n  return { ...pendingRewards }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n  fetchRewardAddress\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\nexport const LaunchPoolsSlice = createSlice({\r\n  name: 'LaunchPools',\r\n  initialState: { data: null },\r\n  reducers: {\r\n    setInitialState: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = livePoolsData\r\n    },\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\nexport const { setInitialState } = LaunchPoolsSlice.actions\r\n\r\nexport const fetchPoolsDataAsync  = () => async (dispatch) => {\r\n  const data = await fetchLaunchPools()\r\n  dispatch(setInitialState(data))\r\n}\r\n\r\nexport const fetchLaunchPools = async () => {\r\n  // TODO: Aqui es donde llamamos a la API\r\n  return poolsConfig\r\n}\r\n\r\nexport const fetchLaunchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const launchPools = await fetchLaunchPools()\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n  console.log(\"fetchLaunchPoolsUserDataAsync\");\r\n  const userData = launchPools.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId]\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x87c182edb12f74d561519ab586205fe6cd75363a',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  \r\n  //   {\r\n  //   pid: 20,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'MASH-ETH LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x548997391C670A5179AF731A30e7C3aDA2f483e7',\r\n  //   },\r\n  //   tokenSymbol: 'MASH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.ETH,\r\n  //   quoteTokenAdresses: contracts.eth,\r\n  // },\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7621886ac71e985dbea4f3f563bbb5a7865876a8',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 13,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-BTCB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0e70ff44229c6573cc020921345948ba4b5ec7cc',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.MASH,\r\n    quoteTokenAdresses: contracts.cake,\r\n    image: 'mash-btcb'\r\n  },\r\n  {\r\n    pid: 14,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-VAULT LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9f8223b4b616aa9becb599c93b0430c6bef0443a',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.VAULT,\r\n    quoteTokenAdresses: contracts.vault,\r\n  },\r\n  {\r\n    pid: 15,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-CAKE LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x16940bc578c30c7c10a2cf8a150b98a8b1cee152',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.MASH,\r\n    quoteTokenAdresses: contracts.cake,\r\n    image: 'mash-cake',\r\n  },\r\n  {\r\n    pid: 21,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-PLUM LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9EC365D77dCF2b3230399a23D35aEF4318de710D',\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.PLUM,\r\n    quoteTokenAdresses: contracts.plum,\r\n    depositUrl: 'https://exchange.pancakeswap.finance/#/add/0x787732f27d18495494cea3792ed7946bbcff8db2/0xdE8eD8c9480EA12D050182AA99630B235dE30f83'\r\n  },\r\n  {\r\n    pid: 22,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-SLIME LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb442780739037577920857DaD91259416b72DE7a',\r\n    },\r\n    tokenSymbol: 'SLIME',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x23b06097F8FE2DD9D3dF094D3ee8319Daa8756c1',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.MASH,\r\n    quoteTokenAdresses: contracts.cake,\r\n    depositUrl: 'https://dex.slime.finance/#/add/0x23b06097F8FE2DD9D3dF094D3ee8319Daa8756c1/0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    image: 'mash-slime'\r\n  },\r\n  {\r\n    pid: 23,\r\n    risk: 5,\r\n    lpSymbol: 'MASH-TAKO LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xC6D926086b29774b10530ab9e02980e9586a061F',\r\n    },\r\n    tokenSymbol: 'TAKO',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2F3391AeBE27393aBa0a790aa5E1577fEA0361c2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.MASH,\r\n    quoteTokenAdresses: contracts.cake,\r\n    depositUrl: 'https://dex.apeswap.finance/#/add/0x2F3391AeBE27393aBa0a790aa5E1577fEA0361c2/0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    image: 'mash-tako'\r\n  },\r\n  {\r\n    pid: 2,\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 2,\r\n    lpSymbol: 'BTCB-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7561eee90e24f3b348e1087a005f78b4c8453524',\r\n    },\r\n    tokenSymbol: 'BTCB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 4,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'MASH',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x87c182edb12f74d561519ab586205fe6cd75363a', // VIKING-BUSD LP\r\n    },\r\n    tokenSymbol: 'MASH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 11,\r\n    risk: 1,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUSD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x87c182edb12f74d561519ab586205fe6cd75363a', // VIKING-BUSD LP (BUSD-BUSD will ignore)\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 10,\r\n    risk: 3,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'WBNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\r\n    },\r\n    tokenSymbol: 'WBNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 12,\r\n    risk: 2,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BTCB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\r\n    },\r\n    tokenSymbol: 'BTCB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 5,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'BUNNY',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xec7a69a3a5ee177c84855c86cc926ca0ba6275cc', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'BUNNY',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 9,\r\n    risk: 10,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'VAULT',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbeba8abb80bfa3c13ee4073d75a873e8a2b71dc3', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'VAULT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xd456be0ff7007b3d8ad656136487a23e771f5762',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 8,\r\n    risk: 4,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'XVS',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x7d0ad8d3333814cf2ba2fb082dbc52d6b1a57c6e', // CAKE-BUSD LP\r\n    },\r\n    tokenSymbol: 'XVS',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xcf6bb5389c92bdda8a3747ddb454cb7a64626c63',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 17,\r\n    risk: 5,\r\n    lpSymbol: 'USDC-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x680Dd100E4b394Bda26A59dD5c119A391e747d18',\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 18,\r\n    risk: 5,\r\n    lpSymbol: 'USDT-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xc15fa3E22c912A276550F3E5FE3b0Deb87B55aCd',\r\n    },\r\n    tokenSymbol: 'USDT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x55d398326f99059ff775485246999027b3197955',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 24,\r\n    risk: 5,\r\n    lpSymbol: 'ETH-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd9A0d1F5e02dE2403f68Bb71a15F8847A854b494',\r\n    },\r\n    tokenSymbol: 'ETH',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  {\r\n    pid: 25,\r\n    risk: 5,\r\n    lpSymbol: 'DOT-WBNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xbCD62661A6b1DEd703585d3aF7d7649Ef4dcDB5c',\r\n    },\r\n    tokenSymbol: 'DOT',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n    image: 'dot-wbnb'\r\n  },\r\n  {\r\n    pid: 19,\r\n    risk: 5,\r\n    lpSymbol: 'DOGE-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x1Efcb446bFa553A2EB2fff99c9F76962be6ECAC3',\r\n    },\r\n    tokenSymbol: 'DOGE',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xba2ae424d960c26247dd6c32edc70b295c744c43',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN\r\n  // AR,\r\n  // CA,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'http://exchange.marshmallowdefi.com/',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'http://exchange.marshmallowdefi.com/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  {\r\n    label: 'SafeFarms',\r\n    icon: 'FarmIcon',\r\n    href: 'http://safefarms.marshmallowdefi.com/info',\r\n  },\r\n  {\r\n    label: 'Launch Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/launch',\r\n  },\r\n  // {\r\n  //   label: 'Audit',\r\n  //   icon: 'AuditIcon',\r\n  //   href: 'https://marshmallowdefi.com/Audit.pdf',\r\n  // },\r\n\r\n\r\n  {\r\n    label: 'Audit',\r\n    icon: 'AuditIcon',\r\n    items: [\r\n      {\r\n        label: 'Techrate',\r\n        href: '/Audit.pdf',\r\n      },\r\n      {\r\n        label: 'CERTIK',\r\n        href: 'https://certik.org/projects/marshmallow',\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    label: 'Partnership',\r\n    icon: 'AuditIcon',\r\n    href: 'https://forms.gle/UdsH5aEU3JxroM5G9',\r\n  },\r\n  {\r\n    label: 'Token Info',\r\n    icon: 'InfoIcon',\r\n    items: [\r\n      {\r\n        label: 'MASH BSC Scan',\r\n        href: 'https://bscscan.com/token/0x787732f27d18495494cea3792ed7946bbcff8db2',\r\n      },\r\n      {\r\n        label: 'MASH Price Graph',\r\n        href: 'https://dex.guru/token/0x787732f27D18495494cea3792ed7946BbCFF8db2-bsc',\r\n      },\r\n      {\r\n        label: 'TOFY BSC Scan',\r\n        href: 'https://bscscan.com/token/0xe1f2d89a6c79b4242f300f880e490a70083e9a1c',\r\n      },\r\n      {\r\n        label: 'TOFY Price Graph',\r\n        href: 'https://charts.bogged.finance/?token=0xe1f2d89a6c79b4242f300f880e490a70083e9a1c',\r\n      }\r\n    ],\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: \"Github\",\r\n        href: \"https://github.com/MarshmallowSwap\",\r\n      },\r\n      {\r\n        label: \"Docs\",\r\n        href: \"https://marshmallowswap.gitbook.io/marshmallowswap/\",\r\n      },\r\n      {\r\n        label: \"Blog\",\r\n        href: \"https://medium.com/@marshmallowdefi\",\r\n      },\r\n      {\r\n        label: \"Telegram\",\r\n        href: \"https://t.me/MarshmallowDeFi\"\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceMashBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceMashBusd()\r\n\r\n  return (\r\n    <>\r\n      <UikitMenu\r\n        account={account}\r\n        login={connect}\r\n        logout={reset}\r\n        isDark={isDark}\r\n        toggleTheme={toggleTheme}\r\n        currentLang={selectedLanguage && selectedLanguage.code}\r\n        langs={allLanguages}\r\n        setLang={setSelectedLanguage}\r\n        cakePriceUsd={cakePriceUsd.toNumber()}\r\n        links={config}\r\n        priceLink=\"https://bscscan.com/token/0x787732f27d18495494cea3792ed7946bbcff8db2\"\r\n        {...props}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n    previewImage: 'swapsies-preview.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n    previewImage: 'drizzle-preview.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n    previewImage: 'blueberries-preview.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n    previewImage: 'circular-preview.png',\r\n    blurImage: 'circular-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n    previewImage: 'sparkle-preview.png',\r\n    blurImage: 'sparkle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const LaunchPools = lazy(() => import('./views/LaunchPools'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms/>\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            <Route path=\"/launch\">\r\n              <Pools />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if(farmConfig.isTokenOnly){\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, mashPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'mashPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        mashPerBlock: new BigNumber(mashPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingEgg',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n"],"sourceRoot":""}