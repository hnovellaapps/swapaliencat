[{"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\index.tsx":"1","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\App.tsx":"2","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\Providers.tsx":"3","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\style\\Global.tsx":"4","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\PageLoader.tsx":"5","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\NotFound.tsx":"6","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Nft\\components\\NftGlobalNotification.tsx":"7","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\hooks.ts":"8","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\index.ts":"9","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\index.ts":"10","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\index.ts":"11","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\getRpcUrl.ts":"12","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Menu\\index.tsx":"13","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\BlockContext.tsx":"14","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\ThemeContext.tsx":"15","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\RefreshContext.tsx":"16","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\Localisation\\languageContext.tsx":"17","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Page.tsx":"18","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\index.ts":"19","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\actions.ts":"20","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\types.ts":"21","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\Farms.tsx":"22","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Menu\\config.ts":"23","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\Home.tsx":"24","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\Pools.tsx":"25","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\multicall.ts":"26","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useI18n.ts":"27","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\nfts.ts":"28","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Container.tsx":"29","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useRefresh.ts":"30","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\index.ts":"31","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useTheme.ts":"32","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\web3.ts":"33","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\Localisation\\translationsContext.ts":"34","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\localisation\\languageCodes.ts":"35","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\translateTextHelpers.ts":"36","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\Divider.tsx":"37","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\TwitterCard.tsx":"38","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Coming.tsx":"39","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\PoolCard.tsx":"40","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Divider.tsx":"41","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\TotalValueLockedCard.tsx":"42","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeStats.tsx":"43","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\FarmStakingCard.tsx":"44","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx":"45","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\index.ts":"46","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\fetchPoolsUser.ts":"47","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\fetchPools.ts":"48","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\addressHelpers.ts":"49","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\formatBalance.ts":"50","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useBlock.ts":"51","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Background.tsx":"52","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx":"53","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Flex.tsx":"54","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx":"55","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CardFooter.tsx":"56","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\HarvestButton.tsx":"57","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\OldSyrupTitle.tsx":"58","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Card.tsx":"59","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CardTitle.tsx":"60","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CardValue.tsx":"61","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CompoundModal.tsx":"62","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useTokenBalance.ts":"63","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\fetchFarmUser.ts":"64","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\pools.ts":"65","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\index.ts":"66","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\fetchFarms.ts":"67","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx":"68","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\contracts.ts":"69","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\erc20.ts":"70","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Tags.tsx":"71","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Balance.tsx":"72","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\farms.ts":"73","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"74","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ModalActions\\index.ts":"75","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ModalActions\\ModalActions.tsx":"76","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\compoundApyHelpers.ts":"77","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\getLiquidityUrlPathParts.ts":"78","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Spacer\\index.ts":"79","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Spacer\\Spacer.tsx":"80","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx":"81","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx":"82","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx":"83","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeWalletBalance.tsx":"84","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeHarvestBalance.tsx":"85","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\WithdrawModal.tsx":"86","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\DepositModal.tsx":"87","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useFarmsWithBalance.ts":"88","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useHarvest.ts":"89","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\UnlockButton.tsx":"90","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useUnstake.ts":"91","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useStake.ts":"92","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useApprove.ts":"93","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useContract.ts":"94","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx":"95","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx":"96","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ExpandableSectionButton\\index.ts":"97","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\TokenInput\\index.ts":"98","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Label\\index.ts":"99","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\DepositModal.tsx":"100","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\WithdrawModal.tsx":"101","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\callHelpers.ts":"102","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useWeb3.ts":"103","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx":"104","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\TokenInput\\TokenInput.tsx":"105","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Label\\Label.tsx":"106","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\index.ts":"107","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\ifo.ts":"108","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Input\\index.ts":"109","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Input\\Input.tsx":"110"},{"size":278,"mtime":1626903371711,"results":"111","hashOfConfig":"112"},{"size":2874,"mtime":1626903371626,"results":"113","hashOfConfig":"112"},{"size":1393,"mtime":1626903371627,"results":"114","hashOfConfig":"112"},{"size":595,"mtime":1626903371725,"results":"115","hashOfConfig":"112"},{"size":397,"mtime":1626903371646,"results":"116","hashOfConfig":"112"},{"size":856,"mtime":1626903371849,"results":"117","hashOfConfig":"112"},{"size":2937,"mtime":1626903371833,"results":"118","hashOfConfig":"112"},{"size":4851,"mtime":1626903371718,"results":"119","hashOfConfig":"112"},{"size":35,"mtime":1626903371754,"results":"120","hashOfConfig":"112"},{"size":34,"mtime":1626903371764,"results":"121","hashOfConfig":"112"},{"size":35,"mtime":1626903371864,"results":"122","hashOfConfig":"112"},{"size":329,"mtime":1626903371735,"results":"123","hashOfConfig":"112"},{"size":1212,"mtime":1626903371643,"results":"124","hashOfConfig":"112"},{"size":772,"mtime":1626903371684,"results":"125","hashOfConfig":"112"},{"size":938,"mtime":1626903371689,"results":"126","hashOfConfig":"112"},{"size":942,"mtime":1626903371688,"results":"127","hashOfConfig":"112"},{"size":3233,"mtime":1626903371685,"results":"128","hashOfConfig":"112"},{"size":426,"mtime":1626903371661,"results":"129","hashOfConfig":"112"},{"size":286,"mtime":1626903371719,"results":"130","hashOfConfig":"112"},{"size":265,"mtime":1626903371713,"results":"131","hashOfConfig":"112"},{"size":2252,"mtime":1626903371680,"results":"132","hashOfConfig":"112"},{"size":4830,"mtime":1626903371741,"results":"133","hashOfConfig":"112"},{"size":2454,"mtime":1626903371643,"results":"134","hashOfConfig":"112"},{"size":2776,"mtime":1626903371755,"results":"135","hashOfConfig":"112"},{"size":12118,"mtime":1626903371851,"results":"136","hashOfConfig":"112"},{"size":964,"mtime":1626903371738,"results":"137","hashOfConfig":"112"},{"size":566,"mtime":1626903371701,"results":"138","hashOfConfig":"112"},{"size":2120,"mtime":1626903371678,"results":"139","hashOfConfig":"112"},{"size":320,"mtime":1626903371660,"results":"140","hashOfConfig":"112"},{"size":260,"mtime":1626903371704,"results":"141","hashOfConfig":"112"},{"size":6287,"mtime":1626903371723,"results":"142","hashOfConfig":"112"},{"size":371,"mtime":1626903371705,"results":"143","hashOfConfig":"112"},{"size":770,"mtime":1626903371739,"results":"144","hashOfConfig":"112"},{"size":404,"mtime":1626903371686,"results":"145","hashOfConfig":"112"},{"size":2034,"mtime":1626903371682,"results":"146","hashOfConfig":"112"},{"size":1614,"mtime":1626903371739,"results":"147","hashOfConfig":"112"},{"size":193,"mtime":1626903371744,"results":"148","hashOfConfig":"112"},{"size":1389,"mtime":1626903371763,"results":"149","hashOfConfig":"112"},{"size":2179,"mtime":1626903371856,"results":"150","hashOfConfig":"112"},{"size":9459,"mtime":1626903371861,"results":"151","hashOfConfig":"112"},{"size":193,"mtime":1626903371859,"results":"152","hashOfConfig":"112"},{"size":1673,"mtime":1626903371763,"results":"153","hashOfConfig":"112"},{"size":2395,"mtime":1626903371757,"results":"154","hashOfConfig":"112"},{"size":3695,"mtime":1626903371760,"results":"155","hashOfConfig":"112"},{"size":6852,"mtime":1626903371750,"results":"156","hashOfConfig":"112"},{"size":2133,"mtime":1626903371717,"results":"157","hashOfConfig":"112"},{"size":3971,"mtime":1626903371722,"results":"158","hashOfConfig":"112"},{"size":2433,"mtime":1626903371721,"results":"159","hashOfConfig":"112"},{"size":604,"mtime":1626903371727,"results":"160","hashOfConfig":"112"},{"size":400,"mtime":1626903371732,"results":"161","hashOfConfig":"112"},{"size":214,"mtime":1626903371695,"results":"162","hashOfConfig":"112"},{"size":251,"mtime":1626903371659,"results":"163","hashOfConfig":"112"},{"size":1319,"mtime":1626903371753,"results":"164","hashOfConfig":"112"},{"size":298,"mtime":1626903371661,"results":"165","hashOfConfig":"112"},{"size":910,"mtime":1626903371862,"results":"166","hashOfConfig":"112"},{"size":3808,"mtime":1626903371855,"results":"167","hashOfConfig":"112"},{"size":3213,"mtime":1626903371859,"results":"168","hashOfConfig":"112"},{"size":885,"mtime":1626903371860,"results":"169","hashOfConfig":"112"},{"size":694,"mtime":1626903371853,"results":"170","hashOfConfig":"112"},{"size":433,"mtime":1626903371856,"results":"171","hashOfConfig":"112"},{"size":880,"mtime":1626903371760,"results":"172","hashOfConfig":"112"},{"size":1853,"mtime":1626903371857,"results":"173","hashOfConfig":"112"},{"size":2002,"mtime":1626903371708,"results":"174","hashOfConfig":"112"},{"size":2532,"mtime":1626903371715,"results":"175","hashOfConfig":"112"},{"size":6470,"mtime":1626903371679,"results":"176","hashOfConfig":"112"},{"size":295,"mtime":1626903371680,"results":"177","hashOfConfig":"112"},{"size":4593,"mtime":1626903371716,"results":"178","hashOfConfig":"112"},{"size":1051,"mtime":1626903371745,"results":"179","hashOfConfig":"112"},{"size":1106,"mtime":1626903371674,"results":"180","hashOfConfig":"112"},{"size":1105,"mtime":1626903371730,"results":"181","hashOfConfig":"112"},{"size":819,"mtime":1626903371649,"results":"182","hashOfConfig":"112"},{"size":1141,"mtime":1626903371634,"results":"183","hashOfConfig":"112"},{"size":10135,"mtime":1626903371675,"results":"184","hashOfConfig":"112"},{"size":4734,"mtime":1626903371746,"results":"185","hashOfConfig":"112"},{"size":42,"mtime":1626903371645,"results":"186","hashOfConfig":"112"},{"size":797,"mtime":1626903371645,"results":"187","hashOfConfig":"112"},{"size":1316,"mtime":1626903371729,"results":"188","hashOfConfig":"112"},{"size":584,"mtime":1626903371734,"results":"189","hashOfConfig":"112"},{"size":36,"mtime":1626903371648,"results":"190","hashOfConfig":"112"},{"size":722,"mtime":1626903371647,"results":"191","hashOfConfig":"112"},{"size":3229,"mtime":1626903371748,"results":"192","hashOfConfig":"112"},{"size":1336,"mtime":1626903371748,"results":"193","hashOfConfig":"112"},{"size":2439,"mtime":1626903371749,"results":"194","hashOfConfig":"112"},{"size":765,"mtime":1626903371758,"results":"195","hashOfConfig":"112"},{"size":676,"mtime":1626903371757,"results":"196","hashOfConfig":"112"},{"size":1941,"mtime":1626903371863,"results":"197","hashOfConfig":"112"},{"size":2418,"mtime":1626903371858,"results":"198","hashOfConfig":"112"},{"size":1334,"mtime":1626903371698,"results":"199","hashOfConfig":"112"},{"size":2055,"mtime":1626903371700,"results":"200","hashOfConfig":"112"},{"size":545,"mtime":1626903371656,"results":"201","hashOfConfig":"112"},{"size":2099,"mtime":1626903371709,"results":"202","hashOfConfig":"112"},{"size":1690,"mtime":1626903371705,"results":"203","hashOfConfig":"112"},{"size":2535,"mtime":1626903371694,"results":"204","hashOfConfig":"112"},{"size":2834,"mtime":1626903371697,"results":"205","hashOfConfig":"112"},{"size":2146,"mtime":1626903371751,"results":"206","hashOfConfig":"112"},{"size":2040,"mtime":1626903371750,"results":"207","hashOfConfig":"112"},{"size":53,"mtime":1626903371636,"results":"208","hashOfConfig":"112"},{"size":40,"mtime":1626903371654,"results":"209","hashOfConfig":"112"},{"size":35,"mtime":1626903371640,"results":"210","hashOfConfig":"112"},{"size":2023,"mtime":1626903371742,"results":"211","hashOfConfig":"112"},{"size":1914,"mtime":1626903371753,"results":"212","hashOfConfig":"112"},{"size":3692,"mtime":1626903371728,"results":"213","hashOfConfig":"112"},{"size":1023,"mtime":1626903371710,"results":"214","hashOfConfig":"112"},{"size":938,"mtime":1626903371635,"results":"215","hashOfConfig":"112"},{"size":2084,"mtime":1626903371653,"results":"216","hashOfConfig":"112"},{"size":478,"mtime":1626903371639,"results":"217","hashOfConfig":"112"},{"size":279,"mtime":1626903371677,"results":"218","hashOfConfig":"112"},{"size":4693,"mtime":1626903371676,"results":"219","hashOfConfig":"112"},{"size":78,"mtime":1626903371638,"results":"220","hashOfConfig":"112"},{"size":1164,"mtime":1626903371638,"results":"221","hashOfConfig":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},"k8psqe",{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"224"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"224"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"224"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"224"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"224"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"224"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"224"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"224"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"224"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"224"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"224"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"224"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"224"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"224"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"224"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"224"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"224"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"224"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"224"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\index.tsx",[],["462","463","464","465","466"],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\App.tsx",["467"],"import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const LaunchPools = lazy(() => import('./views/LaunchPools'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms/>\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            <Route path=\"/launch\">\r\n              <Pools />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\Providers.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\style\\Global.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\PageLoader.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\NotFound.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Nft\\components\\NftGlobalNotification.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\hooks.ts",["468","469"],"import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { fetchLaunchPoolsUserDataAsync, fetchPoolsDataAsync } from './pools'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n    dispatch(fetchPoolsDataAsync()) \r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useLaunchPools = (): Pool[] => {\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceMashBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // MASH-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  let value = new BigNumber(0)\r\n  const totalFarmsValue = useFarmsValue()\r\n  const totalLaunchPoolValue = useLaunchPoolValue()\r\n  value = BigNumber.sum(totalFarmsValue, totalLaunchPoolValue)\r\n  return value\r\n}\r\n\r\nexport const useFarmsValue = () => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const mashPrice = usePriceMashBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken))\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) { // TODO: should be updated with quiteToken.MASH\r\n        val = (mashPrice.times(farm.lpTotalInQuoteToken))\r\n      } else {\r\n        val = (farm.lpTotalInQuoteToken)\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport const useLaunchPoolValue = () => {\r\n  const launchPools = useLaunchPools();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const mashPrice = usePriceMashBusd();\r\n  let value = new BigNumber(0);\r\n  launchPools.forEach(launchPool => {\r\n    if (launchPool.stakingTokenAddress) {\r\n      let val;\r\n      if (launchPool.stakingTokenName === QuoteToken.MASH) {\r\n        val = mashPrice.times(launchPool.totalStaked).div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      } else if (launchPool.stakingTokenName === QuoteToken.BNB) {\r\n        val = bnbPrice.times(launchPool.totalStaked).div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      } else {\r\n        val = launchPool.totalStaked.div(new BigNumber(10).pow(launchPool.tokenDecimals))\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  })\r\n  return value;\r\n}\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\getRpcUrl.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Menu\\index.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\BlockContext.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\ThemeContext.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\RefreshContext.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\Localisation\\languageContext.tsx",["470","471"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Page.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\actions.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\types.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\Farms.tsx",["472","473"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport Background from 'components/layout/Background';\r\nimport { useFarms, usePriceBnbBusd, usePriceMashBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceMashBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.mashPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Background src='images/background.png' alt='background' />\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(10002, 'Stake tokens to earn EGG')\r\n            :\r\n          TranslateString(320, 'Stake LP tokens to earn EGG')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Menu\\config.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\Home.tsx",["474","475","476"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport Background from 'components/layout/Background';\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  // align-items: center;\r\n  // background-image: url('/images/egg/3.png');\r\n  // background-repeat: no-repeat;\r\n  // background-position: top center;\r\n  // display: flex;\r\n  // justify-content: center;\r\n  // flex-direction: column;\r\n  // margin: auto;\r\n  // margin-bottom: 32px;\r\n  // padding-top: 116px;\r\n  // text-align: center;\r\n\r\n  // background-image: url('/images/egg/alert_4.jpg');\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n  background-repeat: no-repeat;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    // background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\r\n    // background-position: left center, right center;\r\n    // height: 165px;\r\n    // padding-top: 0;\r\n\r\n    height: 170px;\r\n    background-position: center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n    margin-bottom: 25px\r\n    \r\n  }\r\n`\r\n\r\nconst BannerImg = styled.img`\r\n  height: 32vh;\r\n  width: 56vw;\r\n  object-fit: cover;\r\n  position: absolute;\r\n  top: 0px;\r\n  left: calc(50% - 28vw);\r\n`;\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Background src='images/background.png' alt='background' />\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {/* {TranslateString(576, 'MarshamallowDeFi')} */}\r\n          <BannerImg src='images/banner.png' alt='banner' />\r\n        </Heading>\r\n        {/* <Text>The sweetest and softest yield farm on the Binance Smart Chain!</Text> */}\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard />\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\Pools.tsx",["477","478","479","480","481","482","483","484","485","486","487","488","489"],"import React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@pancakeswap-libs/uikit'\r\nimport { ChainId, Token, Fetcher } from '@pancakeswap-libs/sdk'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { isArray } from 'lodash'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useBlock from 'hooks/useBlock'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useFarms, usePriceBnbBusd, usePools, usePriceMashBusd } from 'state/hooks'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport Background from 'components/layout/Background';\r\nimport Coming from './components/Coming'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst MASH = new Token(ChainId.MAINNET, '0x787732f27d18495494cea3792ed7946bbcff8db2', 18)\r\nconst BNB = new Token(ChainId.MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18)\r\n\r\nconst Pools: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const farms = useFarms()\r\n  const pools = usePools(account)\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  const cakebusd = usePriceMashBusd() // slimePriceInBusd\r\n  const block = useBlock()\r\n  let bbprice = new BigNumber(0)\r\n\r\n  const priceList = {}\r\n\r\n  const TokenPriceBNB = (token: string, tokenDecimals: number, isLpReward: boolean,isSlimeAMM:boolean): BigNumber => {\r\n    const [price, setPrice] = React.useState(new BigNumber(0))\r\n\r\n    React.useEffect(() => {\r\n      async function fetchdata(_token, _isLp, _tokenDecimals,_slimeamm) {\r\n        if (_token !== '') {\r\n          const mytoken = `0x${_token.substring(2).toUpperCase()}`\r\n\r\n          if (mytoken !== '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            // console.log('aj ****** isLp', _isLp, mytoken)\r\n            if (_isLp === true) {\r\n              console.log('myLPtokenDATA11')\r\n              const calls = [\r\n                // Balance of quote token on LP contract\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'balanceOf',\r\n                  params: [mytoken],\r\n                },\r\n\r\n                // Total supply of LP tokens\r\n                {\r\n                  address: mytoken,\r\n                  name: 'totalSupply',\r\n                },\r\n                // Token decimals\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'decimals',\r\n                },\r\n              ]\r\n\r\n              const [quoteTokenBlanceLP, lpTotalSupply, qtokenDecimals] = await multicall(erc20, calls)\r\n              const tokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(qtokenDecimals))\r\n\r\n              const LpAmount = new BigNumber(lpTotalSupply).div(new BigNumber(10).pow(18))\r\n\r\n              const LpPrice = tokenAmount.multipliedBy(cakebusd).multipliedBy(new BigNumber(2)).div(LpAmount)\r\n\r\n              console.log('LpPrice', token, LpPrice.toNumber(), LpAmount.toNumber())\r\n              setPrice(LpPrice)\r\n            } else {\r\n              const TOKEN = new Token(ChainId.MAINNET, mytoken, _tokenDecimals)\r\n              Fetcher.fetchPairData(\r\n                TOKEN,\r\n                BNB,\r\n                getDefaultProvider('https://patient-long-flower.bsc.quiknode.pro/e8d35735534a1fa9c3680c58e16b3847be567cf4/'),\r\n              ).then((pairData) =>\r\n                setPrice(\r\n                  new BigNumber(\r\n                    parseFloat(pairData.reserve1.toSignificant(4)) / parseFloat(pairData.reserve0.toSignificant(4)),\r\n                  ),\r\n                ),\r\n              )\r\n            }\r\n          } else if (mytoken === '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            setPrice(new BigNumber(1))\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('fetchdata', token, isLpReward, tokenDecimals)\r\n      fetchdata(token, isLpReward, tokenDecimals,isSlimeAMM)\r\n    }, [token, isLpReward, tokenDecimals,isSlimeAMM])\r\n\r\n    priceList[token] = price\r\n    return price\r\n  }\r\n\r\n  const StakeTokenPriceBNB = (token: string, tokenDecimals: number, isLpReward: boolean,isSlimeAMM:boolean): BigNumber => {\r\n    const [price, setPrice] = React.useState(new BigNumber(0))\r\n\r\n    React.useEffect(() => {\r\n      async function fetchdata(_token, _isLp, _tokenDecimals,_slimeamm) {\r\n        if (_token !== '') {\r\n          console.log('tokeeeeeen STAKEE', _token)\r\n          const mytoken = `0x${_token.substring(2).toUpperCase()}`\r\n\r\n          if (mytoken !== '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            console.log('isLp STAKEE', _isLp)\r\n            if (_isLp === true) {\r\n              console.log('myLPtokenDATA11 STAKEE')\r\n              const calls = [\r\n                // Balance of quote token on LP contract\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'balanceOf',\r\n                  params: [mytoken],\r\n                },\r\n\r\n                // Total supply of LP tokens\r\n                {\r\n                  address: mytoken,\r\n                  name: 'totalSupply',\r\n                },\r\n                // Token decimals\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'decimals',\r\n                },\r\n              ]\r\n\r\n              const [quoteTokenBlanceLP, lpTotalSupply, qtokenDecimals] = await multicall(erc20, calls)\r\n              const tokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(qtokenDecimals))\r\n\r\n              const LpAmount = new BigNumber(lpTotalSupply).div(new BigNumber(10).pow(18))\r\n\r\n              const LpPrice = tokenAmount.multipliedBy(cakebusd).multipliedBy(new BigNumber(2)).div(LpAmount)\r\n\r\n              console.log('LpPrice STAKEE', token, LpPrice.toNumber(), LpAmount.toNumber())\r\n              setPrice(LpPrice)\r\n            } else {\r\n\r\n              const TOKEN = new Token(ChainId.MAINNET, mytoken, _tokenDecimals)\r\n              Fetcher.fetchPairData(\r\n                TOKEN,\r\n                BNB,\r\n                getDefaultProvider('https://patient-long-flower.bsc.quiknode.pro/e8d35735534a1fa9c3680c58e16b3847be567cf4/'),\r\n              ).then((pairData) =>\r\n\r\n\r\n                setPrice(\r\n                  new BigNumber(\r\n                    parseFloat(pairData.reserve1.toSignificant(4)) / parseFloat(pairData.reserve0.toSignificant(4)),\r\n                  ),\r\n                ),\r\n              )\r\n            }\r\n\r\n\r\n\r\n          } else if (mytoken === '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            setPrice(new BigNumber(1))\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('fetchdata STAKEE', token, isLpReward, tokenDecimals)\r\n      fetchdata(token, isLpReward, tokenDecimals,isSlimeAMM)\r\n    }, [token, isLpReward, tokenDecimals,isSlimeAMM])\r\n\r\n    priceList[token] = price\r\n    return price\r\n  }\r\n\r\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\r\n    const tokenPriceBN = new BigNumber(tokenPrice)\r\n    if (tokenName === 'BNB') {\r\n      return new BigNumber(1)\r\n    }\r\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\r\n      return tokenPriceBN.div(bnbPriceUSD)\r\n    }\r\n    return tokenPriceBN\r\n  }\r\n\r\n  let stakepriceBUSD = new BigNumber(1)\r\n  const poolsWithApy = pools.map((pool) => {\r\n    bbprice = new BigNumber(0)\r\n    let stakePrice = new BigNumber(0)\r\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\r\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\r\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\r\n\r\n    const TokenRewardAddress = pool.userData\r\n    const tkname = pool.tokenName\r\n\r\n    let address = ''\r\n\r\n    if (TokenRewardAddress) {\r\n      address = TokenRewardAddress.rewardAddress\r\n\r\n      if (isArray(address)) {\r\n        address = address[0]\r\n      }\r\n    }\r\n\r\n    const price = TokenPriceBNB(address, pool.tokenDecimals, pool.isLPReward, pool.isSlimeAMM)\r\n    if(pool.stakingTokenAddress !== \"0x787732f27d18495494cea3792ed7946bbcff8db2\"){\r\n      stakePrice = StakeTokenPriceBNB(pool.stakingTokenAddress, 18, pool.isLPStake,pool.isSlimeAMM)\r\n    }\r\n\r\n    if (pool.isLPStake) {\r\n      stakepriceBUSD = stakePrice\r\n    }  else if(pool.stakingTokenAddress === \"0x787732f27d18495494cea3792ed7946bbcff8db2\"){\r\n      stakePrice = cakebusd.div(bnbPriceUSD);\r\n      stakepriceBUSD= cakebusd;\r\n    } else {\r\n      stakepriceBUSD = bnbPriceUSD.multipliedBy(stakePrice)\r\n    }\r\n\r\n    if (pool.userData) {\r\n      if (pool.isLPReward) {\r\n        bbprice = price\r\n      } else {\r\n        bbprice = bnbPriceUSD.multipliedBy(price)\r\n      }\r\n\r\n      if (bbprice === new BigNumber(0)) {\r\n        const rewardTokenPriceInBNB = priceToBnb(\r\n          pool.tokenName,\r\n          rewardTokenFarm?.tokenPriceVsQuote,\r\n          rewardTokenFarm?.quoteTokenSymbol,\r\n        )\r\n        bbprice = bnbPriceUSD.multipliedBy(rewardTokenPriceInBNB)\r\n      }\r\n    }\r\n    // console.log('RewardPrice', address, bbprice.toNumber(), price.toNumber())\r\n    // /!\\ Assume that the farm quote price is BNB\r\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\r\n\r\n    /*\r\n\r\n    */\r\n    const tvl = cakebusd.multipliedBy(pool.totalStaked)\r\n    const rperyear = bbprice.multipliedBy(pool.tokenPerBlock).multipliedBy(BLOCKS_PER_YEAR)\r\n    const apy2 = rperyear.div(tvl)\r\n\r\n    const totalRewardPricePerYear = bbprice.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n    const totalStakingTokenInPool = cakebusd.times(getBalanceNumber(pool.totalStaked))\r\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n    \r\n    return {\r\n      ...pool,\r\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\r\n      apy,\r\n      bbprice,\r\n      stakepriceBUSD,\r\n    }\r\n  })\r\n\r\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\r\n\r\n  return (\r\n    <Page>\r\n      <Background src='images/background.png' alt='background' />\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\r\n            {TranslateString(282, 'Launch Pool')}\r\n          </Heading>\r\n          <ul>\r\n            <li>{TranslateString(406, 'Be part of our ecosystem.')}</li>\r\n          </ul>\r\n        </div>\r\n        <img src=\"/images/building_big.png\" alt=\"Launch POOL icon\" width={410} height={191} />\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          <>\r\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\r\n              <PoolCard key={pool.sousId} pool={pool} />\r\n            ))}\r\n            <Coming />\r\n          </>\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n            <PoolCard key={pool.sousId} pool={pool} />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 100%;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Pools\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\multicall.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useI18n.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\nfts.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Container.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useRefresh.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\index.ts",["490"],"/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n  fetchRewardAddress\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\nexport const LaunchPoolsSlice = createSlice({\r\n  name: 'LaunchPools',\r\n  initialState: { data: null },\r\n  reducers: {\r\n    setInitialState: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = livePoolsData\r\n    },\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\nexport const { setInitialState } = LaunchPoolsSlice.actions\r\n\r\nexport const fetchPoolsDataAsync  = () => async (dispatch) => {\r\n  const data = await fetchLaunchPools()\r\n  dispatch(setInitialState(data))\r\n}\r\n\r\nexport const fetchLaunchPools = async () => {\r\n  // TODO: Aqui es donde llamamos a la API\r\n  return poolsConfig\r\n}\r\n\r\nexport const fetchLaunchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const launchPools = await fetchLaunchPools()\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n  console.log(\"fetchLaunchPoolsUserDataAsync\");\r\n  const userData = launchPools.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId]\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useTheme.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\web3.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\contexts\\Localisation\\translationsContext.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\localisation\\languageCodes.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\translateTextHelpers.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\Divider.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\TwitterCard.tsx",["491","492","493","494","495","496","497","498","499"],"import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'SwapMarshmallow'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Coming.tsx",["500"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Image, Button } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag } from 'components/Tags'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Card from './Card'\r\nimport CardTitle from './CardTitle'\r\n\r\nconst Balance = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 40px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst DetailPlaceholder = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n`\r\nconst Value = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Footer = styled.div`\r\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\r\n  padding: 24px;\r\n`\r\nconst Coming: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Card>\r\n      <div style={{ padding: '24px' }}>\r\n        <CardTitle>\r\n          {TranslateString(414, 'Your Project?')}{' '}\r\n          <span role=\"img\" aria-label=\"eyes\">\r\n            👀\r\n          </span>\r\n        </CardTitle>\r\n        {/* <Image src=\"/images/bunny-question.svg\" width={64} height={64} alt=\"Your project here\" /> */}\r\n        <Balance>???</Balance>\r\n        <Label>{TranslateString(416, 'Create a pool for your token')}</Label>\r\n        <Button\r\n          variant=\"secondary\"\r\n          as=\"a\"\r\n          href=\"https://docs.google.com/forms/d/e/1FAIpQLSd04X9jhtGf6xs3tR1RHUFxVDtuArIWnM1lNt32pDxi9ObY9Q/viewform\"\r\n          external\r\n          fullWidth\r\n          mb=\"16px\"\r\n        >\r\n          {TranslateString(418, 'Apply Now')}\r\n        </Button>\r\n        <DetailPlaceholder>\r\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APR')}:</div>\r\n          <Value>??</Value>\r\n        </DetailPlaceholder>\r\n        <DetailPlaceholder>\r\n          <div style={{ flex: 1 }}>\r\n            {TranslateString(384, 'Your Stake')}:\r\n          </div>\r\n          <Value>??? MASH</Value>\r\n        </DetailPlaceholder>\r\n      </div>\r\n      <Footer>\r\n        <CommunityTag />\r\n      </Footer>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Coming\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\PoolCard.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Divider.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\TotalValueLockedCard.tsx",["501","502"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useFarmsValue, useLaunchPoolValue, useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const totalValue = useTotalValue()\r\n  const farmsValue = useFarmsValue()\r\n  const launchPoolsValue = useLaunchPoolValue()\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"12px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n        <Heading size=\"md\" mb=\"12px\" mt=\"20px\">\r\n          {TranslateString(999, 'Value Locked for Farms and Pools')}\r\n        </Heading>\r\n        <>\r\n          <CardValue value={farmsValue.toNumber()} prefix=\"$\" decimals={2} fontSize=\"30px\" />\r\n        </>\r\n        <Heading size=\"md\" mb=\"12px\" mt=\"20px\">\r\n          {TranslateString(999, 'Value Locked for Launch Pools')}\r\n        </Heading>\r\n        <>\r\n          <CardValue value={launchPoolsValue.toNumber()} prefix=\"$\" decimals={2} fontSize=\"30px\" />\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeStats.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\FarmStakingCard.tsx",["503"],"import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceMashBusd } from '../../../state/hooks'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceMashBusd().toNumber()\r\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\r\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'MASH to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'MASH in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx",["504"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  let farmImage;\r\n  if (farm.isTokenOnly) {\r\n    farmImage = farm.tokenSymbol.toLowerCase()\r\n  } else {\r\n    farmImage = farm.image ? farm.image : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n  }\r\n  // const farmImage = farm.isTokenOnly ? (\r\n  //   farm.tokenSymbol.toLowerCase()\r\n  // ) : (\r\n  //   farm.image ? \r\n  //     farm.image : \r\n  //     `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n  // )\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'MASH'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'MASH' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          depositUrl={farm.depositUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\fetchPoolsUser.ts",["505","506"],"import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n\r\nexport const fetchRewardAddress = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'rewardToken',\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n\r\n  console.log(\"fetchRewardAddress\",res);\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]:res[index],\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n\r\n  return { ...pendingRewards }\r\n}\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\pools\\fetchPools.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\addressHelpers.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\formatBalance.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useBlock.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Background.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\layout\\Flex.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\PoolTabButtons\\index.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CardFooter.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\HarvestButton.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\OldSyrupTitle.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\Card.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CardTitle.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CardValue.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\CompoundModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useTokenBalance.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\fetchFarmUser.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\pools.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\state\\farms\\fetchFarms.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\contracts.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\erc20.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Tags.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Balance.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\farms.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ModalActions\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ModalActions\\ModalActions.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\compoundApyHelpers.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\getLiquidityUrlPathParts.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Spacer\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Spacer\\Spacer.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx",["507"],"import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          MASH\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx",["508","509","510","511"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeWalletBalance.tsx",["512","513","514"],"import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({cakeBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Home\\components\\CakeHarvestBalance.tsx",["515","516"],"import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\WithdrawModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Pools\\components\\DepositModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useFarmsWithBalance.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useHarvest.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\UnlockButton.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useUnstake.ts",["517"],"import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync} from 'state/farms'\r\nimport {\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId, isFinished) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account, isFinished)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account, isFinished)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId, isFinished],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useStake.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useApprove.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useContract.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ExpandableSectionButton\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\TokenInput\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Label\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\DepositModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\views\\Farms\\components\\WithdrawModal.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\utils\\callHelpers.ts",["518"],"import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account, isFinished) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  // if (isFinished) {\r\n  //   return sousChefContract.methods\r\n  //     .emergencyWithdraw()\r\n  //     .send({ from: account })\r\n  //     .on('transactionHash', (tx) => {\r\n  //       return tx.transactionHash\r\n  //     })\r\n  // }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\hooks\\useWeb3.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\TokenInput\\TokenInput.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Label\\Label.tsx",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\config\\constants\\ifo.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Input\\index.ts",[],"C:\\Users\\Hector\\swapmarsh\\marshmallow-frontend\\src\\components\\Input\\Input.tsx",[],{"ruleId":"519","replacedBy":"520"},{"ruleId":"521","replacedBy":"522"},{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","replacedBy":"528"},{"ruleId":"529","severity":1,"message":"530","line":2,"column":35,"nodeType":"531","messageId":"532","endLine":2,"endColumn":43},{"ruleId":"529","severity":1,"message":"533","line":2,"column":21,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"534","line":6,"column":10,"nodeType":"531","messageId":"532","endLine":6,"endColumn":39},{"ruleId":"529","severity":1,"message":"535","line":33,"column":7,"nodeType":"531","messageId":"532","endLine":33,"endColumn":43},{"ruleId":"536","severity":1,"message":"537","line":60,"column":7,"nodeType":"538","messageId":"539","endLine":60,"endColumn":18},{"ruleId":"529","severity":1,"message":"540","line":8,"column":27,"nodeType":"531","messageId":"532","endLine":8,"endColumn":41},{"ruleId":"529","severity":1,"message":"541","line":8,"column":43,"nodeType":"531","messageId":"532","endLine":8,"endColumn":56},{"ruleId":"529","severity":1,"message":"542","line":3,"column":19,"nodeType":"531","messageId":"532","endLine":3,"endColumn":23},{"ruleId":"529","severity":1,"message":"543","line":8,"column":8,"nodeType":"531","messageId":"532","endLine":8,"endColumn":19},{"ruleId":"529","severity":1,"message":"544","line":83,"column":9,"nodeType":"531","messageId":"532","endLine":83,"endColumn":24},{"ruleId":"529","severity":1,"message":"545","line":48,"column":62,"nodeType":"531","messageId":"532","endLine":48,"endColumn":71},{"ruleId":"536","severity":1,"message":"537","line":55,"column":15,"nodeType":"538","messageId":"539","endLine":55,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":83,"column":15,"nodeType":"538","messageId":"539","endLine":83,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":105,"column":7,"nodeType":"538","messageId":"539","endLine":105,"endColumn":18},{"ruleId":"529","severity":1,"message":"545","line":117,"column":62,"nodeType":"531","messageId":"532","endLine":117,"endColumn":71},{"ruleId":"536","severity":1,"message":"537","line":119,"column":11,"nodeType":"538","messageId":"539","endLine":119,"endColumn":22},{"ruleId":"536","severity":1,"message":"537","line":123,"column":13,"nodeType":"538","messageId":"539","endLine":123,"endColumn":24},{"ruleId":"536","severity":1,"message":"537","line":125,"column":15,"nodeType":"538","messageId":"539","endLine":125,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":153,"column":15,"nodeType":"538","messageId":"539","endLine":153,"endColumn":26},{"ruleId":"536","severity":1,"message":"537","line":181,"column":7,"nodeType":"538","messageId":"539","endLine":181,"endColumn":18},{"ruleId":"529","severity":1,"message":"546","line":209,"column":11,"nodeType":"531","messageId":"532","endLine":209,"endColumn":17},{"ruleId":"529","severity":1,"message":"547","line":253,"column":11,"nodeType":"531","messageId":"532","endLine":253,"endColumn":33},{"ruleId":"529","severity":1,"message":"548","line":260,"column":11,"nodeType":"531","messageId":"532","endLine":260,"endColumn":15},{"ruleId":"536","severity":1,"message":"537","line":93,"column":3,"nodeType":"538","messageId":"539","endLine":93,"endColumn":14},{"ruleId":"529","severity":1,"message":"542","line":2,"column":35,"nodeType":"531","messageId":"532","endLine":2,"endColumn":39},{"ruleId":"529","severity":1,"message":"549","line":3,"column":8,"nodeType":"531","messageId":"532","endLine":3,"endColumn":17},{"ruleId":"529","severity":1,"message":"550","line":6,"column":10,"nodeType":"531","messageId":"532","endLine":6,"endColumn":26},{"ruleId":"529","severity":1,"message":"551","line":7,"column":10,"nodeType":"531","messageId":"532","endLine":7,"endColumn":24},{"ruleId":"529","severity":1,"message":"552","line":7,"column":26,"nodeType":"531","messageId":"532","endLine":7,"endColumn":42},{"ruleId":"529","severity":1,"message":"553","line":9,"column":10,"nodeType":"531","messageId":"532","endLine":9,"endColumn":24},{"ruleId":"529","severity":1,"message":"554","line":10,"column":8,"nodeType":"531","messageId":"532","endLine":10,"endColumn":17},{"ruleId":"529","severity":1,"message":"555","line":11,"column":10,"nodeType":"531","messageId":"532","endLine":11,"endColumn":18},{"ruleId":"529","severity":1,"message":"556","line":18,"column":7,"nodeType":"531","messageId":"532","endLine":18,"endColumn":10},{"ruleId":"529","severity":1,"message":"557","line":3,"column":10,"nodeType":"531","messageId":"532","endLine":3,"endColumn":15},{"ruleId":"529","severity":1,"message":"558","line":3,"column":35,"nodeType":"531","messageId":"532","endLine":3,"endColumn":43},{"ruleId":"529","severity":1,"message":"559","line":5,"column":10,"nodeType":"531","messageId":"532","endLine":5,"endColumn":21},{"ruleId":"529","severity":1,"message":"560","line":12,"column":8,"nodeType":"531","messageId":"532","endLine":12,"endColumn":22},{"ruleId":"529","severity":1,"message":"561","line":5,"column":10,"nodeType":"531","messageId":"532","endLine":5,"endColumn":24},{"ruleId":"529","severity":1,"message":"562","line":101,"column":42,"nodeType":"531","messageId":"532","endLine":101,"endColumn":49},{"ruleId":"536","severity":1,"message":"537","line":108,"column":3,"nodeType":"538","messageId":"539","endLine":108,"endColumn":14},{"ruleId":"529","severity":1,"message":"563","line":8,"column":26,"nodeType":"531","messageId":"532","endLine":8,"endColumn":43},{"ruleId":"529","severity":1,"message":"564","line":4,"column":10,"nodeType":"531","messageId":"532","endLine":4,"endColumn":22},{"ruleId":"529","severity":1,"message":"565","line":4,"column":24,"nodeType":"531","messageId":"532","endLine":4,"endColumn":31},{"ruleId":"529","severity":1,"message":"566","line":4,"column":33,"nodeType":"531","messageId":"532","endLine":4,"endColumn":40},{"ruleId":"529","severity":1,"message":"567","line":28,"column":3,"nodeType":"531","messageId":"532","endLine":28,"endColumn":7},{"ruleId":"529","severity":1,"message":"568","line":4,"column":8,"nodeType":"531","messageId":"532","endLine":4,"endColumn":23},{"ruleId":"529","severity":1,"message":"553","line":6,"column":10,"nodeType":"531","messageId":"532","endLine":6,"endColumn":24},{"ruleId":"529","severity":1,"message":"550","line":7,"column":10,"nodeType":"531","messageId":"532","endLine":7,"endColumn":26},{"ruleId":"529","severity":1,"message":"549","line":4,"column":8,"nodeType":"531","messageId":"532","endLine":4,"endColumn":17},{"ruleId":"529","severity":1,"message":"560","line":6,"column":8,"nodeType":"531","messageId":"532","endLine":6,"endColumn":22},{"ruleId":"529","severity":1,"message":"569","line":10,"column":32,"nodeType":"531","messageId":"532","endLine":10,"endColumn":51},{"ruleId":"529","severity":1,"message":"570","line":46,"column":70,"nodeType":"531","messageId":"532","endLine":46,"endColumn":80},"lines-around-directive",["571"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'fetchLaunchPoolsUserDataAsync' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'Text' is defined but never used.","'LotteryCard' is defined but never used.","'TranslateString' is assigned a value but never used.","'_slimeamm' is defined but never used.","'tkname' is assigned a value but never used.","'stakingTokenPriceInBNB' is assigned a value but never used.","'apy2' is assigned a value but never used.","'BigNumber' is defined but never used.","'getBalanceNumber' is defined but never used.","'useTotalSupply' is defined but never used.","'useBurnedBalance' is defined but never used.","'getCakeAddress' is defined but never used.","'CardValue' is defined but never used.","'useFarms' is defined but never used.","'Row' is assigned a value but never used.","'Image' is defined but never used.","'Skeleton' is defined but never used.","'useGetStats' is defined but never used.","'useAllEarnings' is defined but never used.","'communityFarms' is defined but never used.","'account' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'useTokenBalance' is defined but never used.","'sousEmegencyUnstake' is defined but never used.","'isFinished' is defined but never used.","padding-line-between-statements"]